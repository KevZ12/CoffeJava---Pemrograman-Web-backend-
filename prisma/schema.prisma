// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

}

model User {
  id           String       @unique @default(uuid())
  nama         String
  email        String    @unique
  password     String
  tanggalLahir DateTime
  gender       String
  token        Token[]
  ratings      Rating[]     // Relasi 1-to-many ke model Rating
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Token {
  id            String   @id @default(uuid()) // Added an id field as the primary key
  RefreshToken  String   @db.LongText           // Marked RefreshToken as unique
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Product {
  product_id                Int                      @id @default(autoincrement())
  pName                     String
  location                  String
  desc                      String  @default("No description available")
  brand                     String  @default("Unknown")
  weight                    Float
  categories                ProductCategory[]        // Relation to the ProductCategory join table
  subcategories             ProductSubCategory[]     // Relation to the ProductSubCategory join table
  specificSubCategories     ProductSpecificSubCategory[] // Relation to the ProductSpecificSubCategory join table
  stock                     Stock[]                  @relation("ProductStocks")
  images                    Image[]                  @relation("ProductImages")
  sale                      Boolean                  @default(false) // Indikator apakah produk sedang diskon
  discount                  Float?                   // Diskon dalam persen (0-100), opsional, diisi jika sale = true
  ratings                   Rating[]                 // Relasi 1-to-many ke model Rating
}



model Rating {
  rating_id                 Int                      @id @default(autoincrement())
  value                     Float                    // Nilai rating, misalnya 1.0 hingga 5.0
  review                    String?                  // Ulasan dari user (opsional)
  product                   Product                  @relation(fields: [product_id], references: [product_id])
  product_id                Int                      // Foreign key ke Product
    user                      User                     @relation(fields: [user_id], references: [id])  // Relasi dengan User
  user_id                   String                   // Foreign key ke User
  createdAt                 DateTime                 @default(now()) // Waktu pembuatan rating
}

model Category {
  category_id               Int                      @id @default(autoincrement())
  category_name             String
  products                  ProductCategory[]        // Relation to the ProductCategory join table
}

model SubCategory {
  sub_category_id           Int                      @id @default(autoincrement())
  sub_category_name         String
  products                  ProductSubCategory[]     // Relation to the ProductSubCategory join table
}

model SpecificSubCategory {
  specific_sub_category_id  Int                      @id @default(autoincrement())
  specific_sub_category_name String
  products                  ProductSpecificSubCategory[] // Relation to the ProductSpecificSubCategory join table
}

/// Join tables for many-to-many relationships

model ProductCategory {
  product_id    Int
  category_id   Int
  Product       Product    @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  Category      Category   @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  @@id([product_id, category_id])  // Composite primary key
}

model ProductSubCategory {
  product_id       Int
  sub_category_id  Int
  Product          Product       @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  SubCategory      SubCategory   @relation(fields: [sub_category_id], references: [sub_category_id], onDelete: Cascade)

  @@id([product_id, sub_category_id])  // Composite primary key
}

model ProductSpecificSubCategory {
  product_id                Int
  specific_sub_category_id  Int
  Product                   Product               @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  SpecificSubCategory       SpecificSubCategory   @relation(fields: [specific_sub_category_id], references: [specific_sub_category_id], onDelete: Cascade)

  @@id([product_id, specific_sub_category_id])  // Composite primary key
}

/// Stock model for size-specific stock tracking

model Stock {
  stock_id       Int       @id @default(autoincrement())
  product_id     Int
  size           String    // e.g., "S", "M", "L", "XL"
  quantity       Int       // Number of items available in this size
  
  Product        Product   @relation("ProductStocks", fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([product_id, size])  // Ensures each size is unique for a given product
}

/// Image model to store URLs of product images

model Image {
  image_id       Int       @id @default(autoincrement())
  product_id     Int
  image_url      String    // URL of the product image

  Product        Product   @relation("ProductImages", fields: [product_id], references: [product_id], onDelete: Cascade)
}

generator erd {
  provider = "prisma-erd-generator"
}




